;;;; mnas-list.lisp

(in-package #:mnas-list)

;;; "mnas-list" goes here. Hacks and glory await!

(defun unique (list &key (key nil) (test nil) (test-not nil))
  "Возвращает список, содержащий уникальные элементы;
Примеры использования:
;;;;(unique (list 1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 8 ))
;;;;=>(8 7 6 5 4 3 2 1)
;;;;(unique (list \"1\" \"2\" \"3\" \"4\" \"5\" \"2\" \"3\" \"4\" \"5\" \"6\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\"))
;;;;=>(\"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"6\" \"5\" \"4\" \"3\" \"2\" \"5\" \"4\" \"3\" \"2\" \"1\")
;;;;(unique (list \"1\" \"2\" \"3\" \"4\" \"5\" \"2\" \"3\" \"4\" \"5\" \"6\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\") :test #'string=)
;;;;=>(\"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\")
;;;;(unique (list \"1\" \"2\" \"3\" \"4\" \"5\" \"2\" \"3\" \"4\" \"5\" \"6\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\") :test-not #'string/=)
;;;;=>(\"8\" \"7\" \"6\" \"5\" \"4\" \"3\" \"2\" \"1\")
"
  (let ((rez nil))
    (mapcar
     #'(lambda (el)
	 (setf rez (adjoin el rez :key key :test test :test-not test-not)))
     list)
    rez))
